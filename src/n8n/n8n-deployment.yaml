---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: n8n
  labels:
    name: n8n

---
# PersistentVolumeClaim für n8n Daten
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-data
  namespace: n8n
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# PersistentVolumeClaim für PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: n8n
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Secrets werden per Kommandozeile erstellt (siehe Deployment-Anleitung)
---
# ConfigMap für n8n
apiVersion: v1
kind: ConfigMap
metadata:
  name: n8n-config
  namespace: n8n
data:
  N8N_PORT: "5678"
  N8N_PROTOCOL: "http"
  GENERIC_TIMEZONE: "Europe/Berlin"
  DB_TYPE: "postgresdb"
  N8N_LOG_LEVEL: "info"

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: n8n
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - n8n
                - -d
                - n8n
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - n8n
                - -d
                - n8n
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: n8n
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app: postgres

---
# n8n Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: n8n
  labels:
    app: n8n
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
  template:
    metadata:
      labels:
        app: n8n
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres-service -p 5432 -U n8n; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
      containers:
        - name: n8n
          image: n8nio/n8n:latest
          ports:
            - containerPort: 5678
              name: http
          env:
            - name: N8N_PORT
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: N8N_PORT
            - name: N8N_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: N8N_PROTOCOL
            - name: GENERIC_TIMEZONE
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: GENERIC_TIMEZONE
            - name: DB_TYPE
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: DB_TYPE
            - name: N8N_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: n8n-config
                  key: N8N_LOG_LEVEL
            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: N8N_ENCRYPTION_KEY
            - name: DB_POSTGRESDB_HOST
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: DB_POSTGRESDB_HOST
            - name: DB_POSTGRESDB_PORT
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: DB_POSTGRESDB_PORT
            - name: DB_POSTGRESDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: DB_POSTGRESDB_DATABASE
            - name: DB_POSTGRESDB_USER
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: DB_POSTGRESDB_USER
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: n8n-secret
                  key: DB_POSTGRESDB_PASSWORD
          volumeMounts:
            - name: n8n-data
              mountPath: /home/node/.n8n
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5678
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 5678
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
      volumes:
        - name: n8n-data
          persistentVolumeClaim:
            claimName: n8n-data

---
# n8n Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: n8n-service
  namespace: n8n
  labels:
    app: n8n
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 5678
      protocol: TCP
      name: http
  selector:
    app: n8n

---
# n8n LoadBalancer Service (MetalLB)
apiVersion: v1
kind: Service
metadata:
  name: n8n-loadbalancer
  namespace: n8n
  labels:
    app: n8n
  annotations:
    metallb.universe.tf/allow-shared-ip: "n8n"
    # Optional: Spezifische IP-Adresse zuweisen
    # metallb.universe.tf/loadBalancerIPs: "192.168.1.100"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 5678
      protocol: TCP
      name: http
    - port: 443
      targetPort: 5678
      protocol: TCP
      name: https
  selector:
    app: n8n
  # Optional: Externe Traffic Policy für bessere Performance
  externalTrafficPolicy: Local

---
# Ingress (optional, wenn du zusätzlich Ingress verwenden möchtest)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n8n-ingress
  namespace: n8n
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    # Für microk8s Ingress:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: n8n.local # Ändere dies zu deiner gewünschten Domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n8n-service
                port:
                  number: 80
